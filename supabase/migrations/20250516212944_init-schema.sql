-- Unified Init Schema Migration
-- This migration combines all database setup including tables, RLS policies, constraints, and user management

-- ==============================================
-- USER MANAGEMENT SETUP
-- ==============================================

-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);

-- Set up Row Level Security (RLS) for profiles
alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

create policy "Anyone can update their own avatar." on storage.objects
  for update using ((select auth.uid()) = owner) with check (bucket_id = 'avatars');

-- ==============================================
-- BUSINESS TABLES
-- ==============================================

-- Countries
create table countries (
  id bigint primary key generated by default as identity,
  name varchar(256) not null,
  code varchar(2) not null
);
alter table public.countries enable row level security;

-- States
create table states (
  id bigint primary key generated by default as identity,
  name varchar(256) not null,
  country_id bigint references countries(id)
);
alter table public.states enable row level security;

-- Cities
create table cities (
  id bigint primary key generated by default as identity,
  name varchar(256) not null,
  country_id bigint references countries(id),
  state_id bigint references states(id)
);
alter table public.cities enable row level security;

-- People
create table people (
  id bigint primary key generated by default as identity,
  person_name varchar(256) not null,
  phone varchar(50),
  mobile varchar(50),
  email varchar(256),
  person_type_id smallint,
  gender_id smallint,
  spouse_id bigint references people(id)
);
alter table public.people enable row level security;

-- Parishes
create table parishes (
  id bigint primary key generated by default as identity,
  name varchar(256) not null,
  diocese varchar(256),
  address varchar(256),
  phone varchar(50),
  email varchar(256),
  city_id bigint references cities(id)
);
alter table public.parishes enable row level security;

-- StepWays
create table step_ways (
  id bigint primary key generated by default as identity,
  name varchar(256) not null,
  order_num smallint
);
alter table public.step_ways enable row level security;

-- Communities (debe ir antes de teams)
create table communities (
  id bigint primary key generated by default as identity,
  number varchar(50) not null,
  born_date date,
  parish_id bigint references parishes(id),
  born_brothers smallint,
  actual_brothers smallint,
  step_way_id bigint references step_ways(id),
  last_step_way_date date,
  cathechist_team_id bigint
);
alter table public.communities enable row level security;

-- TeamTypes
create table team_types (
  id bigint primary key generated by default as identity,
  name varchar(256) not null,
  order_num smallint
);
alter table public.team_types enable row level security;

-- Teams (ahora s√≠ puede referenciar communities)
create table teams (
  id bigint primary key generated by default as identity,
  name varchar(256) not null,
  team_type_id bigint references team_types(id),
  community_id bigint references communities(id)
);
alter table public.teams enable row level security;

-- ParishTeams
create table parish_teams (
  id bigint primary key generated by default as identity,
  parish_id bigint references parishes(id),
  team_id bigint references teams(id)
);
alter table public.parish_teams enable row level security;

-- Priests
create table priests (
  id bigint primary key generated by default as identity,
  person_id bigint references people(id),
  is_parish_priest boolean,
  parish_id bigint references parishes(id)
);
alter table public.priests enable row level security;

-- Brothers
create table brothers (
  id bigint primary key generated by default as identity,
  person_id bigint references people(id),
  community_id bigint references communities(id)
);
alter table public.brothers enable row level security;

-- Belongs
create table belongs (
  id bigint primary key generated by default as identity,
  person_id bigint references people(id),
  community_id bigint references communities(id),
  team_id bigint references teams(id),
  is_responsible_for_the_team boolean
);
alter table public.belongs enable row level security;

-- CommunityStepLog
create table community_step_log (
  id bigint primary key generated by default as identity,
  community_id bigint references communities(id),
  step_way_id bigint references step_ways(id),
  date_of_step date,
  principal_catechist_name varchar(256),
  outcome boolean,
  notes text
);
alter table public.community_step_log enable row level security;

-- ==============================================
-- RLS POLICIES FOR BUSINESS TABLES
-- ==============================================

-- Countries policies
create policy "Enable read access for all users" on countries
  for select using (true);

create policy "Enable insert for authenticated users only" on countries
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on countries
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on countries
  for delete using (auth.role() = 'authenticated');

-- States policies
create policy "Enable read access for all users" on states
  for select using (true);

create policy "Enable insert for authenticated users only" on states
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on states
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on states
  for delete using (auth.role() = 'authenticated');

-- Cities policies
create policy "Enable read access for all users" on cities
  for select using (true);

create policy "Enable insert for authenticated users only" on cities
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on cities
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on cities
  for delete using (auth.role() = 'authenticated');

-- Parishes policies
create policy "Enable read access for all users" on parishes
  for select using (true);

create policy "Enable insert for authenticated users only" on parishes
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on parishes
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on parishes
  for delete using (auth.role() = 'authenticated');

-- StepWays policies
create policy "Enable read access for all users" on step_ways
  for select using (true);

create policy "Enable insert for authenticated users only" on step_ways
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on step_ways
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on step_ways
  for delete using (auth.role() = 'authenticated');

-- TeamTypes policies
create policy "Enable read access for all users" on team_types
  for select using (true);

create policy "Enable insert for authenticated users only" on team_types
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on team_types
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on team_types
  for delete using (auth.role() = 'authenticated');

-- Communities policies
create policy "Enable read access for all users" on communities
  for select using (true);

create policy "Enable insert for authenticated users only" on communities
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on communities
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on communities
  for delete using (auth.role() = 'authenticated');

-- Teams policies
create policy "Enable read access for all users" on teams
  for select using (true);

create policy "Enable insert for authenticated users only" on teams
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on teams
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on teams
  for delete using (auth.role() = 'authenticated');

-- ParishTeams policies
create policy "Enable read access for all users" on parish_teams
  for select using (true);

create policy "Enable insert for authenticated users only" on parish_teams
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on parish_teams
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on parish_teams
  for delete using (auth.role() = 'authenticated');

-- Priests policies
create policy "Enable read access for all users" on priests
  for select using (true);

create policy "Enable insert for authenticated users only" on priests
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on priests
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on priests
  for delete using (auth.role() = 'authenticated');

-- Brothers policies
create policy "Enable read access for all users" on brothers
  for select using (true);

create policy "Enable insert for authenticated users only" on brothers
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on brothers
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on brothers
  for delete using (auth.role() = 'authenticated');

-- Belongs policies
create policy "Enable read access for all users" on belongs
  for select using (true);

create policy "Enable insert for authenticated users only" on belongs
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on belongs
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on belongs
  for delete using (auth.role() = 'authenticated');

-- People policies
create policy "Enable read access for all users" on people
  for select using (true);

create policy "Enable insert for authenticated users only" on people
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on people
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on people
  for delete using (auth.role() = 'authenticated');

-- CommunityStepLog policies
create policy "Enable read access for all users" on community_step_log
  for select using (true);

create policy "Enable insert for authenticated users only" on community_step_log
  for insert with check (auth.role() = 'authenticated');

create policy "Enable update for authenticated users only" on community_step_log
  for update using (auth.role() = 'authenticated');

create policy "Enable delete for authenticated users only" on community_step_log
  for delete using (auth.role() = 'authenticated');

-- ==============================================
-- UNIQUE CONSTRAINTS
-- ==============================================

-- Restricci√≥n √∫nica para pa√≠ses: nombre debe ser √∫nico
ALTER TABLE countries ADD CONSTRAINT countries_name_unique UNIQUE (name);

-- Restricci√≥n √∫nica para estados: combinaci√≥n de nombre y pa√≠s debe ser √∫nica
ALTER TABLE states ADD CONSTRAINT states_name_country_unique UNIQUE (name, country_id);

-- Restricci√≥n √∫nica para ciudades: combinaci√≥n de nombre, pa√≠s y estado debe ser √∫nica
ALTER TABLE cities ADD CONSTRAINT cities_name_country_state_unique UNIQUE (name, country_id, state_id);

-- Restricci√≥n √∫nica para parroquias: nombre debe ser √∫nico dentro de una ciudad
ALTER TABLE parishes ADD CONSTRAINT parishes_name_city_unique UNIQUE (name, city_id);

-- Restricci√≥n √∫nica para tipos de equipo: nombre debe ser √∫nico
ALTER TABLE team_types ADD CONSTRAINT team_types_name_unique UNIQUE (name);

-- Restricci√≥n √∫nica para caminos de formaci√≥n: nombre debe ser √∫nico
ALTER TABLE step_ways ADD CONSTRAINT step_ways_name_unique UNIQUE (name);

-- Restricci√≥n √∫nica para comunidades: n√∫mero debe ser √∫nico dentro de una parroquia
ALTER TABLE communities ADD CONSTRAINT communities_number_parish_unique UNIQUE (number, parish_id);

-- ==============================================
-- INDEXES
-- ==============================================

-- Full text search indexes
create index people_person_name_idx on people using gin (to_tsvector('spanish', person_name));
create index parishes_name_idx on parishes using gin (to_tsvector('spanish', name));